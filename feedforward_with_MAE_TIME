import pandas as pd
import torch
import torch.nn as nn
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
import time  # Import the time module



# Upload the input CSV file
from google.colab import files
uploaded = files.upload()
# Note: Adjust the CSV file name and path as necessary.
df = pd.read_csv('KeyData_sorted.csv')

# Define columns to keep
columns_to_keep = ['Course Name',
                   'Round Score', 'Round SG Total', 'Round SG App',
                   'Round SG Arg', 'Round SG Putt', 'Round Driving Distance',
                   'Round Driving Accuracy']

# Drop columns not in columns_to_keep
df = df[columns_to_keep]

# Fill missing values with column means
df.fillna(df.mean(), inplace=True)

# Perform one-hot encoding on the 'Course Name' column
df_encoded = pd.get_dummies(df, columns=['Course Name'])

# Split the encoded data into training and test sets (70% train, 30% test)
train_df, test_df = train_test_split(df_encoded, test_size=0.3, random_state=42)

# Separate features and target variable for the training and test set
train_Y = train_df['Round Score']
train_X = train_df.drop('Round Score', axis=1)
test_Y = test_df['Round Score']
test_X = test_df.drop('Round Score', axis=1)

# Standardize features
scaler = StandardScaler().fit(train_X)
train_X_scaled = scaler.transform(train_X)
test_X_scaled = scaler.transform(test_X)

# Convert scaled data to tensors
train_X_tensor = torch.tensor(train_X_scaled, dtype=torch.float32)
train_Y_tensor = torch.tensor(train_Y.values, dtype=torch.float32).view(-1, 1)
test_X_tensor = torch.tensor(test_X_scaled, dtype=torch.float32)
test_Y_tensor = torch.tensor(test_Y.values, dtype=torch.float32).view(-1, 1)

# Define the neural network
class SimpleRegressionNet(nn.Module):
    def __init__(self, input_size):
        super(SimpleRegressionNet, self).__init__()
        self.fc1 = nn.Linear(input_size, 128)
        self.fc2 = nn.Linear(128, 64)
        self.fc3 = nn.Linear(64, 1)

    def forward(self, x):
        x = torch.relu(self.fc1(x))
        x = torch.relu(self.fc2(x))
        return self.fc3(x)

# Initialize the network
net = SimpleRegressionNet(input_size=train_X.shape[1])

# Use L1Loss for Mean Absolute Error
criterion = nn.L1Loss()
optimizer = torch.optim.Adam(net.parameters(), lr=0.01)

# Start timing your training process
start_time = time.time()

epochs = 100
for epoch in range(epochs):
    net.train()
    optimizer.zero_grad()
    outputs = net(train_X_tensor)
    loss = criterion(outputs, train_Y_tensor)
    loss.backward()
    optimizer.step()

    if (epoch+1) % 10 == 0:
        print(f'Epoch [{epoch+1}/{epochs}], Loss (MAE): {loss.item():.4f}')

# Calculate and print the time taken for training
training_time = time.time() - start_time
print(f'Training Time: {training_time:.2f} seconds')

# Start timing for evaluation
start_time = time.time()

# Evaluate on test data to calculate MAE
net.eval()
with torch.no_grad():
    test_outputs = net(test_X_tensor)
    test_mae = criterion(test_outputs, test_Y_tensor).item()

# Calculate and print the time taken for evaluation
evaluation_time = time.time() - start_time
print(f'Evaluation Time: {evaluation_time:.2f} seconds')
print(f'Test MAE: {test_mae:.4f}')

# Displaying the comparison of predicted vs. actual values for a subset of the test set
predicted_scores = test_outputs.view(-1).numpy()
actual_scores = test_Y_tensor.view(-1).numpy()
comparison = pd.DataFrame({'Actual Score': actual_scores[:10], 'Predicted Score': predicted_scores[:10]})
print(comparison)
