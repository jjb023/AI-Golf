import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import torch
import torch.nn as nn
from sklearn.preprocessing import StandardScaler
import torch.optim as optim
from torch.utils.data import DataLoader, TensorDataset
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
import random

from google.colab import files
uploaded = files.upload()
random.seed(1)

# Load data
df = pd.read_csv('KeyData_sorted.csv')  # Update the path accordingly

# Sort the dataframe first by Player Name and then by Date Completed in ascending order
df_sorted = df.sort_values(by=['Player Name', 'Date Completed'], ascending=[True, True])

# Extract specific player's data
player_data = df_sorted[df_sorted['Player Name'] == 'McIlroy, Rory']  # Example player

# One-hot encoding for the 'Course Name' column
player_data_one_hot = pd.get_dummies(player_data, columns=['Course Name'])

# Define feature and target columns
non_feature_columns = ['Player Name', 'Year Played', 'Date Completed', 'Course Par', 'Round Score']
feature_columns = [col for col in player_data_one_hot.columns if col not in non_feature_columns]
target_column = 'Round Score'

# Prepare the dataset
X = player_data_one_hot[feature_columns].values
y = player_data_one_hot[target_column].values

# Create sequences
def create_sequences(X, y, sequence_length):
    X_seq, y_seq = [], []
    for i in range(len(X) - sequence_length):
        X_seq.append(X[i:i+sequence_length])
        y_seq.append(y[i+sequence_length-1])
    return np.array(X_seq), np.array(y_seq)

sequence_length = 5
X_seq, y_seq = create_sequences(X, y, sequence_length)

# Scale features
scaler = StandardScaler()
X_seq_scaled = np.array([scaler.fit_transform(x) for x in X_seq])

# Split the data into training, validation, and test sets
X_train_val, X_test, y_train_val, y_test = train_test_split(X_seq_scaled, y_seq, test_size=0.2, random_state=42)
X_train, X_val, y_train, y_val = train_test_split(X_train_val, y_train_val, test_size=0.25, random_state=42)  # 0.25 x 0.8 = 0.2

# Convert to PyTorch tensors
X_train_tensor = torch.tensor(X_train, dtype=torch.float32)
y_train_tensor = torch.tensor(y_train, dtype=torch.float32).view(-1, 1)
X_val_tensor = torch.tensor(X_val, dtype=torch.float32)
y_val_tensor = torch.tensor(y_val, dtype=torch.float32).view(-1, 1)
X_test_tensor = torch.tensor(X_test, dtype=torch.float32)
y_test_tensor = torch.tensor(y_test, dtype=torch.float32).view(-1, 1)

# Define the LSTM model
class LSTMNet(nn.Module):
    def __init__(self, input_dim, hidden_dim, output_dim=1, num_layers=2):
        super(LSTMNet, self).__init__()
        self.lstm = nn.LSTM(input_dim, hidden_dim, num_layers, batch_first=True)
        self.fc = nn.Linear(hidden_dim, output_dim)

    def forward(self, x):
        x, (hn, cn) = self.lstm(x)
        x = self.fc(x[:, -1, :])
        return x

# Initialize the model, loss function, and optimizer
model = LSTMNet(input_dim=X_train.shape[2], hidden_dim=64)
criterion = nn.MSELoss()
optimizer = optim.Adam(model.parameters(), lr=0.1)

# Training loop with validation
epochs = 300
train_losses = []
val_losses = []

for epoch in range(epochs):
    model.train()
    optimizer.zero_grad()
    output = model(X_train_tensor)
    loss = criterion(output, y_train_tensor)
    loss.backward()
    optimizer.step()
    train_losses.append(loss.item())

    # Validation phase
    model.eval()
    with torch.no_grad():
        val_output = model(X_val_tensor)
        val_loss = criterion(val_output, y_val_tensor)
        val_losses.append(val_loss.item())

    if epoch % 10 == 0:
        print(f'Epoch {epoch+1}, Train Loss: {loss.item()}, Val Loss: {val_loss.item()}')

# Plotting training and validation loss
plt.figure(figsize=(10, 5))
plt.plot(train_losses, label='Training Loss')
plt.plot(val_losses, label='Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.title('Training and Validation Loss')
plt.legend()
plt.show()

# Evaluation and Prediction on Test Set
model.eval()
with torch.no_grad():
    predictions = model(X_test_tensor).view(-1).numpy()

# Calculate RMSE for the test set
test_rmse = np.sqrt(mean_squared_error(y_test, predictions))
print(f'Test RMSE: {test_rmse}')

# Plot Actual vs Predicted Scores
plt.figure(figsize=(10, 6))
plt.plot(y_test, label='Actual Scores', marker='o')
plt.plot(predictions, label='Predicted Scores', marker='x')
plt.xlabel('Test Sample Index')
plt.ylabel('Golf Score')
plt.title('Actual vs Predicted Golf Scores for Test Set')
plt.savefig('LSTM_predictions')
plt.legend()
plt.show()
